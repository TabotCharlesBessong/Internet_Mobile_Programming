{"ast":null,"code":"export default function sortKD(ids, coords, nodeSize, left, right, depth) {\n  if (right - left <= nodeSize) return;\n  const m = left + right >> 1;\n  select(ids, coords, m, left, right, depth % 2);\n  sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n  sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\nfunction select(ids, coords, k, left, right, inc) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      select(ids, coords, k, newLeft, newRight, inc);\n    }\n    const t = coords[2 * k + inc];\n    let i = left;\n    let j = right;\n    swapItem(ids, coords, left, k);\n    if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n    while (i < j) {\n      swapItem(ids, coords, i, j);\n      i++;\n      j--;\n      while (coords[2 * i + inc] < t) i++;\n      while (coords[2 * j + inc] > t) j--;\n    }\n    if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);else {\n      j++;\n      swapItem(ids, coords, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\nfunction swapItem(ids, coords, i, j) {\n  swap(ids, i, j);\n  swap(coords, 2 * i, 2 * j);\n  swap(coords, 2 * i + 1, 2 * j + 1);\n}\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}","map":{"version":3,"names":["sortKD","ids","coords","nodeSize","left","right","depth","m","select","k","inc","n","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swapItem","swap","arr","tmp"],"sources":["/home/yimnai_dev/PROJECTS/fet/Internet_Mobile_Programming/digitekisi-mobile/node_modules/.pnpm/kdbush@3.0.0/node_modules/kdbush/src/sort.js"],"sourcesContent":["\nexport default function sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    const m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        const t = coords[2 * k + inc];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}