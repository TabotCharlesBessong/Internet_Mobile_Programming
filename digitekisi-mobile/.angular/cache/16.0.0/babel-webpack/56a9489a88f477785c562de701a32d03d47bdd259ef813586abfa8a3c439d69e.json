{"ast":null,"code":"import KDBush from 'kdbush';\nconst defaultOptions = {\n  minZoom: 0,\n  // min zoom to generate clusters on\n  maxZoom: 16,\n  // max zoom level to cluster the points on\n  minPoints: 2,\n  // minimum points to form a cluster\n  radius: 40,\n  // cluster radius in pixels\n  extent: 512,\n  // tile extent (radius is calculated relative to it)\n  nodeSize: 64,\n  // size of the KD-tree leaf node, affects performance\n  log: false,\n  // whether to log timing info\n\n  // whether to generate numeric ids for input features (in vector tiles)\n  generateId: false,\n  // a reduce function for calculating custom cluster properties\n  reduce: null,\n  // (accumulated, props) => { accumulated.sum += props.sum; }\n\n  // properties to use for individual points when running the reducer\n  map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => x => {\n  tmp[0] = +x;\n  return tmp[0];\n})(new Float32Array(1));\nexport default class Supercluster {\n  constructor(options) {\n    this.options = extend(Object.create(defaultOptions), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n  }\n  load(points) {\n    const {\n      log,\n      minZoom,\n      maxZoom,\n      nodeSize\n    } = this.options;\n    if (log) console.time('total time');\n    const timerId = `prepare ${points.length} points`;\n    if (log) console.time(timerId);\n    this.points = points;\n\n    // generate a cluster object for each point and index input points into a KD-tree\n    let clusters = [];\n    for (let i = 0; i < points.length; i++) {\n      if (!points[i].geometry) continue;\n      clusters.push(createPointCluster(points[i], i));\n    }\n    this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n    if (log) console.timeEnd(timerId);\n\n    // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n    // results in a cluster hierarchy across zoom levels\n    for (let z = maxZoom; z >= minZoom; z--) {\n      const now = +Date.now();\n\n      // create a new set of clusters for the zoom and index them with a KD-tree\n      clusters = this._cluster(clusters, z);\n      this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n      if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n    }\n    if (log) console.timeEnd('total time');\n    return this;\n  }\n  getClusters(bbox, zoom) {\n    let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n    const minLat = Math.max(-90, Math.min(90, bbox[1]));\n    let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n    const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n    if (bbox[2] - bbox[0] >= 360) {\n      minLng = -180;\n      maxLng = 180;\n    } else if (minLng > maxLng) {\n      const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n      const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n      return easternHem.concat(westernHem);\n    }\n    const tree = this.trees[this._limitZoom(zoom)];\n    const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n    const clusters = [];\n    for (const id of ids) {\n      const c = tree.points[id];\n      clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n    }\n    return clusters;\n  }\n  getChildren(clusterId) {\n    const originId = this._getOriginId(clusterId);\n    const originZoom = this._getOriginZoom(clusterId);\n    const errorMsg = 'No cluster with the specified id.';\n    const index = this.trees[originZoom];\n    if (!index) throw new Error(errorMsg);\n    const origin = index.points[originId];\n    if (!origin) throw new Error(errorMsg);\n    const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n    const ids = index.within(origin.x, origin.y, r);\n    const children = [];\n    for (const id of ids) {\n      const c = index.points[id];\n      if (c.parentId === clusterId) {\n        children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n      }\n    }\n    if (children.length === 0) throw new Error(errorMsg);\n    return children;\n  }\n  getLeaves(clusterId, limit, offset) {\n    limit = limit || 10;\n    offset = offset || 0;\n    const leaves = [];\n    this._appendLeaves(leaves, clusterId, limit, offset, 0);\n    return leaves;\n  }\n  getTile(z, x, y) {\n    const tree = this.trees[this._limitZoom(z)];\n    const z2 = Math.pow(2, z);\n    const {\n      extent,\n      radius\n    } = this.options;\n    const p = radius / extent;\n    const top = (y - p) / z2;\n    const bottom = (y + 1 + p) / z2;\n    const tile = {\n      features: []\n    };\n    this._addTileFeatures(tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom), tree.points, x, y, z2, tile);\n    if (x === 0) {\n      this._addTileFeatures(tree.range(1 - p / z2, top, 1, bottom), tree.points, z2, y, z2, tile);\n    }\n    if (x === z2 - 1) {\n      this._addTileFeatures(tree.range(0, top, p / z2, bottom), tree.points, -1, y, z2, tile);\n    }\n    return tile.features.length ? tile : null;\n  }\n  getClusterExpansionZoom(clusterId) {\n    let expansionZoom = this._getOriginZoom(clusterId) - 1;\n    while (expansionZoom <= this.options.maxZoom) {\n      const children = this.getChildren(clusterId);\n      expansionZoom++;\n      if (children.length !== 1) break;\n      clusterId = children[0].properties.cluster_id;\n    }\n    return expansionZoom;\n  }\n  _appendLeaves(result, clusterId, limit, offset, skipped) {\n    const children = this.getChildren(clusterId);\n    for (const child of children) {\n      const props = child.properties;\n      if (props && props.cluster) {\n        if (skipped + props.point_count <= offset) {\n          // skip the whole cluster\n          skipped += props.point_count;\n        } else {\n          // enter the cluster\n          skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n          // exit the cluster\n        }\n      } else if (skipped < offset) {\n        // skip a single point\n        skipped++;\n      } else {\n        // add a single point\n        result.push(child);\n      }\n      if (result.length === limit) break;\n    }\n    return skipped;\n  }\n  _addTileFeatures(ids, points, x, y, z2, tile) {\n    for (const i of ids) {\n      const c = points[i];\n      const isCluster = c.numPoints;\n      let tags, px, py;\n      if (isCluster) {\n        tags = getClusterProperties(c);\n        px = c.x;\n        py = c.y;\n      } else {\n        const p = this.points[c.index];\n        tags = p.properties;\n        px = lngX(p.geometry.coordinates[0]);\n        py = latY(p.geometry.coordinates[1]);\n      }\n      const f = {\n        type: 1,\n        geometry: [[Math.round(this.options.extent * (px * z2 - x)), Math.round(this.options.extent * (py * z2 - y))]],\n        tags\n      };\n\n      // assign id\n      let id;\n      if (isCluster) {\n        id = c.id;\n      } else if (this.options.generateId) {\n        // optionally generate id\n        id = c.index;\n      } else if (this.points[c.index].id) {\n        // keep id if already assigned\n        id = this.points[c.index].id;\n      }\n      if (id !== undefined) f.id = id;\n      tile.features.push(f);\n    }\n  }\n  _limitZoom(z) {\n    return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));\n  }\n  _cluster(points, zoom) {\n    const clusters = [];\n    const {\n      radius,\n      extent,\n      reduce,\n      minPoints\n    } = this.options;\n    const r = radius / (extent * Math.pow(2, zoom));\n\n    // loop through each point\n    for (let i = 0; i < points.length; i++) {\n      const p = points[i];\n      // if we've already visited the point at this zoom level, skip it\n      if (p.zoom <= zoom) continue;\n      p.zoom = zoom;\n\n      // find all nearby points\n      const tree = this.trees[zoom + 1];\n      const neighborIds = tree.within(p.x, p.y, r);\n      const numPointsOrigin = p.numPoints || 1;\n      let numPoints = numPointsOrigin;\n\n      // count the number of points in a potential cluster\n      for (const neighborId of neighborIds) {\n        const b = tree.points[neighborId];\n        // filter out neighbors that are already processed\n        if (b.zoom > zoom) numPoints += b.numPoints || 1;\n      }\n\n      // if there were neighbors to merge, and there are enough points to form a cluster\n      if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n        let wx = p.x * numPointsOrigin;\n        let wy = p.y * numPointsOrigin;\n        let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n        // encode both zoom and point index on which the cluster originated -- offset by total length of features\n        const id = (i << 5) + (zoom + 1) + this.points.length;\n        for (const neighborId of neighborIds) {\n          const b = tree.points[neighborId];\n          if (b.zoom <= zoom) continue;\n          b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n          const numPoints2 = b.numPoints || 1;\n          wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n          wy += b.y * numPoints2;\n          b.parentId = id;\n          if (reduce) {\n            if (!clusterProperties) clusterProperties = this._map(p, true);\n            reduce(clusterProperties, this._map(b));\n          }\n        }\n        p.parentId = id;\n        clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n      } else {\n        // left points as unclustered\n        clusters.push(p);\n        if (numPoints > 1) {\n          for (const neighborId of neighborIds) {\n            const b = tree.points[neighborId];\n            if (b.zoom <= zoom) continue;\n            b.zoom = zoom;\n            clusters.push(b);\n          }\n        }\n      }\n    }\n    return clusters;\n  }\n\n  // get index of the point from which the cluster originated\n  _getOriginId(clusterId) {\n    return clusterId - this.points.length >> 5;\n  }\n\n  // get zoom of the point from which the cluster originated\n  _getOriginZoom(clusterId) {\n    return (clusterId - this.points.length) % 32;\n  }\n  _map(point, clone) {\n    if (point.numPoints) {\n      return clone ? extend({}, point.properties) : point.properties;\n    }\n    const original = this.points[point.index].properties;\n    const result = this.options.map(original);\n    return clone && result === original ? extend({}, result) : result;\n  }\n}\nfunction createCluster(x, y, id, numPoints, properties) {\n  return {\n    x: fround(x),\n    // weighted cluster center; round for consistency with Float32Array index\n    y: fround(y),\n    zoom: Infinity,\n    // the last zoom the cluster was processed at\n    id,\n    // encodes index of the first child of the cluster and its zoom level\n    parentId: -1,\n    // parent cluster id\n    numPoints,\n    properties\n  };\n}\nfunction createPointCluster(p, id) {\n  const [x, y] = p.geometry.coordinates;\n  return {\n    x: fround(lngX(x)),\n    // projected point coordinates\n    y: fround(latY(y)),\n    zoom: Infinity,\n    // the last zoom the point was processed at\n    index: id,\n    // index of the source feature in the original input array,\n    parentId: -1 // parent cluster id\n  };\n}\n\nfunction getClusterJSON(cluster) {\n  return {\n    type: 'Feature',\n    id: cluster.id,\n    properties: getClusterProperties(cluster),\n    geometry: {\n      type: 'Point',\n      coordinates: [xLng(cluster.x), yLat(cluster.y)]\n    }\n  };\n}\nfunction getClusterProperties(cluster) {\n  const count = cluster.numPoints;\n  const abbrev = count >= 10000 ? `${Math.round(count / 1000)}k` : count >= 1000 ? `${Math.round(count / 100) / 10}k` : count;\n  return extend(extend({}, cluster.properties), {\n    cluster: true,\n    cluster_id: cluster.id,\n    point_count: count,\n    point_count_abbreviated: abbrev\n  });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n  return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n  const sin = Math.sin(lat * Math.PI / 180);\n  const y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n  return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n  const y2 = (180 - y * 360) * Math.PI / 180;\n  return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\nfunction extend(dest, src) {\n  for (const id in src) dest[id] = src[id];\n  return dest;\n}\nfunction getX(p) {\n  return p.x;\n}\nfunction getY(p) {\n  return p.y;\n}","map":{"version":3,"names":["KDBush","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","nodeSize","log","generateId","reduce","map","props","fround","Math","tmp","x","Float32Array","Supercluster","constructor","options","extend","Object","create","trees","Array","load","points","console","time","timerId","length","clusters","i","geometry","push","createPointCluster","getX","getY","timeEnd","z","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","max","min","maxLng","maxLat","easternHem","westernHem","concat","tree","_limitZoom","ids","range","lngX","latY","id","c","numPoints","getClusterJSON","index","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","r","pow","within","y","children","parentId","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","p","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","result","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","floor","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","exp","dest","src"],"sources":["/home/yimnai_dev/PROJECTS/fet/Internet_Mobile_Programming/digitekisi-mobile/node_modules/.pnpm/supercluster@7.1.5/node_modules/supercluster/index.js"],"sourcesContent":["\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            // if there were neighbors to merge, and there are enough points to form a cluster\n            if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}