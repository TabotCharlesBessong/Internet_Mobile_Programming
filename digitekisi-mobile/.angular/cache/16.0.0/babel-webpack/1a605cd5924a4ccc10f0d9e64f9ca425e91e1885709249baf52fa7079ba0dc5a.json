{"ast":null,"code":"import _asyncToGenerator from \"/home/yimnai_dev/PROJECTS/fet/Internet_Mobile_Programming/digitekisi-mobile/node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { b as getIonMode, c as config } from './ionic-global-3b28a225.js';\nimport { C as CoreDelegate } from './framework-delegate-28f7ea29.js';\nimport { OVERLAY_BACK_BUTTON_PRIORITY } from './hardware-back-button-490df115.js';\nimport { c as componentOnReady, f as focusElement, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-5eb6364d.js';\nimport { p as printIonWarning } from './index-e86f0117.js';\nlet lastId = 0;\nconst activeAnimations = new WeakMap();\nconst createController = tagName => {\n  return {\n    create(options) {\n      return createOverlay(tagName, options);\n    },\n    dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, tagName, id);\n    },\n    getTop() {\n      return _asyncToGenerator(function* () {\n        return getOverlay(document, tagName);\n      })();\n    }\n  };\n};\nconst alertController = /*@__PURE__*/createController('ion-alert');\nconst actionSheetController = /*@__PURE__*/createController('ion-action-sheet');\nconst loadingController = /*@__PURE__*/createController('ion-loading');\nconst modalController = /*@__PURE__*/createController('ion-modal');\nconst pickerController = /*@__PURE__*/createController('ion-picker');\nconst popoverController = /*@__PURE__*/createController('ion-popover');\nconst toastController = /*@__PURE__*/createController('ion-toast');\nconst prepareOverlay = el => {\n  if (typeof document !== 'undefined') {\n    connectListeners(document);\n  }\n  const overlayIndex = lastId++;\n  el.overlayIndex = overlayIndex;\n  if (!el.hasAttribute('id')) {\n    el.id = `ion-overlay-${overlayIndex}`;\n  }\n};\nconst createOverlay = (tagName, opts) => {\n  if (typeof window !== 'undefined' && typeof window.customElements !== 'undefined') {\n    return window.customElements.whenDefined(tagName).then(() => {\n      const element = document.createElement(tagName);\n      element.classList.add('overlay-hidden');\n      /**\n       * Convert the passed in overlay options into props\n       * that get passed down into the new overlay.\n       */\n      Object.assign(element, Object.assign(Object.assign({}, opts), {\n        hasController: true\n      }));\n      // append the overlay element to the document body\n      getAppRoot(document).appendChild(element);\n      return new Promise(resolve => componentOnReady(element, resolve));\n    });\n  }\n  return Promise.resolve();\n};\n/**\n * This query string selects elements that\n * are eligible to receive focus. We select\n * interactive elements that meet the following\n * criteria:\n * 1. Element does not have a negative tabindex\n * 2. Element does not have `hidden`\n * 3. Element does not have `disabled` for non-Ionic components.\n * 4. Element does not have `disabled` or `disabled=\"true\"` for Ionic components.\n * Note: We need this distinction because `disabled=\"false\"` is\n * valid usage for the disabled property on ion-button.\n */\nconst focusableQueryString = '[tabindex]:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), input:not([type=hidden]):not([tabindex^=\"-\"]):not([hidden]):not([disabled]), textarea:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), button:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), select:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), .ion-focusable:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), .ion-focusable[disabled=\"false\"]:not([tabindex^=\"-\"]):not([hidden])';\nconst focusFirstDescendant = (ref, overlay) => {\n  let firstInput = ref.querySelector(focusableQueryString);\n  const shadowRoot = firstInput === null || firstInput === void 0 ? void 0 : firstInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    firstInput = shadowRoot.querySelector(focusableQueryString) || firstInput;\n  }\n  if (firstInput) {\n    focusElement(firstInput);\n  } else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\nconst isOverlayHidden = overlay => overlay.classList.contains('overlay-hidden');\nconst focusLastDescendant = (ref, overlay) => {\n  const inputs = Array.from(ref.querySelectorAll(focusableQueryString));\n  let lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;\n  const shadowRoot = lastInput === null || lastInput === void 0 ? void 0 : lastInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    lastInput = shadowRoot.querySelector(focusableQueryString) || lastInput;\n  }\n  if (lastInput) {\n    lastInput.focus();\n  } else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\n/**\n * Traps keyboard focus inside of overlay components.\n * Based on https://w3c.github.io/aria-practices/examples/dialog-modal/alertdialog.html\n * This includes the following components: Action Sheet, Alert, Loading, Modal,\n * Picker, and Popover.\n * Should NOT include: Toast\n */\nconst trapKeyboardFocus = (ev, doc) => {\n  const lastOverlay = getOverlay(doc, 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover');\n  const target = ev.target;\n  /**\n   * If no active overlay, ignore this event.\n   *\n   * If this component uses the shadow dom,\n   * this global listener is pointless\n   * since it will not catch the focus\n   * traps as they are inside the shadow root.\n   * We need to add a listener to the shadow root\n   * itself to ensure the focus trap works.\n   */\n  if (!lastOverlay || !target) {\n    return;\n  }\n  /**\n   * If the ion-disable-focus-trap class\n   * is present on an overlay, then this component\n   * instance has opted out of focus trapping.\n   * An example of this is when the sheet modal\n   * has a backdrop that is disabled. The content\n   * behind the sheet should be focusable until\n   * the backdrop is enabled.\n   */\n  if (lastOverlay.classList.contains('ion-disable-focus-trap')) {\n    return;\n  }\n  const trapScopedFocus = () => {\n    /**\n     * If we are focusing the overlay, clear\n     * the last focused element so that hitting\n     * tab activates the first focusable element\n     * in the overlay wrapper.\n     */\n    if (lastOverlay === target) {\n      lastOverlay.lastFocus = undefined;\n      /**\n       * Otherwise, we must be focusing an element\n       * inside of the overlay. The two possible options\n       * here are an input/button/etc or the ion-focus-trap\n       * element. The focus trap element is used to prevent\n       * the keyboard focus from leaving the overlay when\n       * using Tab or screen assistants.\n       */\n    } else {\n      /**\n       * We do not want to focus the traps, so get the overlay\n       * wrapper element as the traps live outside of the wrapper.\n       */\n      const overlayRoot = getElementRoot(lastOverlay);\n      if (!overlayRoot.contains(target)) {\n        return;\n      }\n      const overlayWrapper = overlayRoot.querySelector('.ion-overlay-wrapper');\n      if (!overlayWrapper) {\n        return;\n      }\n      /**\n       * If the target is inside the wrapper, let the browser\n       * focus as normal and keep a log of the last focused element.\n       */\n      if (overlayWrapper.contains(target)) {\n        lastOverlay.lastFocus = target;\n      } else {\n        /**\n         * Otherwise, we must have focused one of the focus traps.\n         * We need to wrap the focus to either the first element\n         * or the last element.\n         */\n        /**\n         * Once we call `focusFirstDescendant` and focus the first\n         * descendant, another focus event will fire which will\n         * cause `lastOverlay.lastFocus` to be updated before\n         * we can run the code after that. We will cache the value\n         * here to avoid that.\n         */\n        const lastFocus = lastOverlay.lastFocus;\n        // Focus the first element in the overlay wrapper\n        focusFirstDescendant(overlayWrapper, lastOverlay);\n        /**\n         * If the cached last focused element is the\n         * same as the active element, then we need\n         * to wrap focus to the last descendant. This happens\n         * when the first descendant is focused, and the user\n         * presses Shift + Tab. The previous line will focus\n         * the same descendant again (the first one), causing\n         * last focus to equal the active element.\n         */\n        if (lastFocus === doc.activeElement) {\n          focusLastDescendant(overlayWrapper, lastOverlay);\n        }\n        lastOverlay.lastFocus = doc.activeElement;\n      }\n    }\n  };\n  const trapShadowFocus = () => {\n    /**\n     * If the target is inside the wrapper, let the browser\n     * focus as normal and keep a log of the last focused element.\n     */\n    if (lastOverlay.contains(target)) {\n      lastOverlay.lastFocus = target;\n    } else {\n      /**\n       * Otherwise, we are about to have focus\n       * go out of the overlay. We need to wrap\n       * the focus to either the first element\n       * or the last element.\n       */\n      /**\n       * Once we call `focusFirstDescendant` and focus the first\n       * descendant, another focus event will fire which will\n       * cause `lastOverlay.lastFocus` to be updated before\n       * we can run the code after that. We will cache the value\n       * here to avoid that.\n       */\n      const lastFocus = lastOverlay.lastFocus;\n      // Focus the first element in the overlay wrapper\n      focusFirstDescendant(lastOverlay, lastOverlay);\n      /**\n       * If the cached last focused element is the\n       * same as the active element, then we need\n       * to wrap focus to the last descendant. This happens\n       * when the first descendant is focused, and the user\n       * presses Shift + Tab. The previous line will focus\n       * the same descendant again (the first one), causing\n       * last focus to equal the active element.\n       */\n      if (lastFocus === doc.activeElement) {\n        focusLastDescendant(lastOverlay, lastOverlay);\n      }\n      lastOverlay.lastFocus = doc.activeElement;\n    }\n  };\n  if (lastOverlay.shadowRoot) {\n    trapShadowFocus();\n  } else {\n    trapScopedFocus();\n  }\n};\nconst connectListeners = doc => {\n  if (lastId === 0) {\n    lastId = 1;\n    doc.addEventListener('focus', ev => {\n      trapKeyboardFocus(ev, doc);\n    }, true);\n    // handle back-button click\n    doc.addEventListener('ionBackButton', ev => {\n      const lastOverlay = getOverlay(doc);\n      if (lastOverlay === null || lastOverlay === void 0 ? void 0 : lastOverlay.backdropDismiss) {\n        ev.detail.register(OVERLAY_BACK_BUTTON_PRIORITY, () => {\n          return lastOverlay.dismiss(undefined, BACKDROP);\n        });\n      }\n    });\n    // handle ESC to close overlay\n    doc.addEventListener('keydown', ev => {\n      if (ev.key === 'Escape') {\n        const lastOverlay = getOverlay(doc);\n        if (lastOverlay === null || lastOverlay === void 0 ? void 0 : lastOverlay.backdropDismiss) {\n          lastOverlay.dismiss(undefined, BACKDROP);\n        }\n      }\n    });\n  }\n};\nconst dismissOverlay = (doc, data, role, overlayTag, id) => {\n  const overlay = getOverlay(doc, overlayTag, id);\n  if (!overlay) {\n    return Promise.reject('overlay does not exist');\n  }\n  return overlay.dismiss(data, role);\n};\nconst getOverlays = (doc, selector) => {\n  if (selector === undefined) {\n    selector = 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast';\n  }\n  return Array.from(doc.querySelectorAll(selector)).filter(c => c.overlayIndex > 0);\n};\n/**\n * Returns an overlay element\n * @param doc The document to find the element within.\n * @param overlayTag The selector for the overlay, defaults to Ionic overlay components.\n * @param id The unique identifier for the overlay instance.\n * @returns The overlay element or `undefined` if no overlay element is found.\n */\nconst getOverlay = (doc, overlayTag, id) => {\n  const overlays = getOverlays(doc, overlayTag).filter(o => !isOverlayHidden(o));\n  return id === undefined ? overlays[overlays.length - 1] : overlays.find(o => o.id === id);\n};\n/**\n * When an overlay is presented, the main\n * focus is the overlay not the page content.\n * We need to remove the page content from the\n * accessibility tree otherwise when\n * users use \"read screen from top\" gestures with\n * TalkBack and VoiceOver, the screen reader will begin\n * to read the content underneath the overlay.\n *\n * We need a container where all page components\n * exist that is separate from where the overlays\n * are added in the DOM. For most apps, this element\n * is the top most ion-router-outlet. In the event\n * that devs are not using a router,\n * they will need to add the \"ion-view-container-root\"\n * id to the element that contains all of their views.\n *\n * TODO: If Framework supports having multiple top\n * level router outlets we would need to update this.\n * Example: One outlet for side menu and one outlet\n * for main content.\n */\nconst setRootAriaHidden = (hidden = false) => {\n  const root = getAppRoot(document);\n  const viewContainer = root.querySelector('ion-router-outlet, ion-nav, #ion-view-container-root');\n  if (!viewContainer) {\n    return;\n  }\n  if (hidden) {\n    viewContainer.setAttribute('aria-hidden', 'true');\n  } else {\n    viewContainer.removeAttribute('aria-hidden');\n  }\n};\nconst present = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (overlay, name, iosEnterAnimation, mdEnterAnimation, opts) {\n    var _a, _b;\n    if (overlay.presented) {\n      return;\n    }\n    setRootAriaHidden(true);\n    overlay.presented = true;\n    overlay.willPresent.emit();\n    (_a = overlay.willPresentShorthand) === null || _a === void 0 ? void 0 : _a.emit();\n    const mode = getIonMode(overlay);\n    // get the user's animation fn if one was provided\n    const animationBuilder = overlay.enterAnimation ? overlay.enterAnimation : config.get(name, mode === 'ios' ? iosEnterAnimation : mdEnterAnimation);\n    const completed = yield overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n    if (completed) {\n      overlay.didPresent.emit();\n      (_b = overlay.didPresentShorthand) === null || _b === void 0 ? void 0 : _b.emit();\n    }\n    /**\n     * When an overlay that steals focus\n     * is dismissed, focus should be returned\n     * to the element that was focused\n     * prior to the overlay opening. Toast\n     * does not steal focus and is excluded\n     * from returning focus as a result.\n     */\n    if (overlay.el.tagName !== 'ION-TOAST') {\n      focusPreviousElementOnDismiss(overlay.el);\n    }\n    /**\n     * If the focused element is already\n     * inside the overlay component then\n     * focus should not be moved from that\n     * to the overlay container.\n     */\n    if (overlay.keyboardClose && (document.activeElement === null || !overlay.el.contains(document.activeElement))) {\n      overlay.el.focus();\n    }\n  });\n  return function present(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * When an overlay component is dismissed,\n * focus should be returned to the element\n * that presented the overlay. Otherwise\n * focus will be set on the body which\n * means that people using screen readers\n * or tabbing will need to re-navigate\n * to where they were before they\n * opened the overlay.\n */\nconst focusPreviousElementOnDismiss = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (overlayEl) {\n    let previousElement = document.activeElement;\n    if (!previousElement) {\n      return;\n    }\n    const shadowRoot = previousElement === null || previousElement === void 0 ? void 0 : previousElement.shadowRoot;\n    if (shadowRoot) {\n      // If there are no inner focusable elements, just focus the host element.\n      previousElement = shadowRoot.querySelector(focusableQueryString) || previousElement;\n    }\n    yield overlayEl.onDidDismiss();\n    previousElement.focus();\n  });\n  return function focusPreviousElementOnDismiss(_x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst dismiss = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (overlay, data, role, name, iosLeaveAnimation, mdLeaveAnimation, opts) {\n    var _a, _b;\n    if (!overlay.presented) {\n      return false;\n    }\n    setRootAriaHidden(false);\n    overlay.presented = false;\n    try {\n      // Overlay contents should not be clickable during dismiss\n      overlay.el.style.setProperty('pointer-events', 'none');\n      overlay.willDismiss.emit({\n        data,\n        role\n      });\n      (_a = overlay.willDismissShorthand) === null || _a === void 0 ? void 0 : _a.emit({\n        data,\n        role\n      });\n      const mode = getIonMode(overlay);\n      const animationBuilder = overlay.leaveAnimation ? overlay.leaveAnimation : config.get(name, mode === 'ios' ? iosLeaveAnimation : mdLeaveAnimation);\n      // If dismissed via gesture, no need to play leaving animation again\n      if (role !== GESTURE) {\n        yield overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n      }\n      overlay.didDismiss.emit({\n        data,\n        role\n      });\n      (_b = overlay.didDismissShorthand) === null || _b === void 0 ? void 0 : _b.emit({\n        data,\n        role\n      });\n      activeAnimations.delete(overlay);\n      /**\n       * Make overlay hidden again in case it is being reused.\n       * We can safely remove pointer-events: none as\n       * overlay-hidden will set display: none.\n       */\n      overlay.el.classList.add('overlay-hidden');\n      overlay.el.style.removeProperty('pointer-events');\n      /**\n       * Clear any focus trapping references\n       * when the overlay is dismissed.\n       */\n      if (overlay.el.lastFocus !== undefined) {\n        overlay.el.lastFocus = undefined;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    overlay.el.remove();\n    return true;\n  });\n  return function dismiss(_x7, _x8, _x9, _x10, _x11, _x12, _x13) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nconst getAppRoot = doc => {\n  return doc.querySelector('ion-app') || doc.body;\n};\nconst overlayAnimation = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (overlay, animationBuilder, baseEl, opts) {\n    // Make overlay visible in case it's hidden\n    baseEl.classList.remove('overlay-hidden');\n    const aniRoot = overlay.el;\n    const animation = animationBuilder(aniRoot, opts);\n    if (!overlay.animated || !config.getBoolean('animated', true)) {\n      animation.duration(0);\n    }\n    if (overlay.keyboardClose) {\n      animation.beforeAddWrite(() => {\n        const activeElement = baseEl.ownerDocument.activeElement;\n        if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.matches('input,ion-input, ion-textarea')) {\n          activeElement.blur();\n        }\n      });\n    }\n    const activeAni = activeAnimations.get(overlay) || [];\n    activeAnimations.set(overlay, [...activeAni, animation]);\n    yield animation.play();\n    return true;\n  });\n  return function overlayAnimation(_x14, _x15, _x16, _x17) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nconst eventMethod = (element, eventName) => {\n  let resolve;\n  const promise = new Promise(r => resolve = r);\n  onceEvent(element, eventName, event => {\n    resolve(event.detail);\n  });\n  return promise;\n};\nconst onceEvent = (element, eventName, callback) => {\n  const handler = ev => {\n    removeEventListener(element, eventName, handler);\n    callback(ev);\n  };\n  addEventListener(element, eventName, handler);\n};\nconst isCancel = role => {\n  return role === 'cancel' || role === BACKDROP;\n};\nconst defaultGate = h => h();\n/**\n * Calls a developer provided method while avoiding\n * Angular Zones. Since the handler is provided by\n * the developer, we should throw any errors\n * received so that developer-provided bug\n * tracking software can log it.\n */\nconst safeCall = (handler, arg) => {\n  if (typeof handler === 'function') {\n    const jmp = config.get('_zoneGate', defaultGate);\n    return jmp(() => {\n      try {\n        return handler(arg);\n      } catch (e) {\n        throw e;\n      }\n    });\n  }\n  return undefined;\n};\nconst BACKDROP = 'backdrop';\nconst GESTURE = 'gesture';\n/**\n * Creates a delegate controller.\n *\n * Requires that the component has the following properties:\n * - `el: HTMLElement`\n * - `hasController: boolean`\n * - `delegate?: FrameworkDelegate`\n *\n * @param ref The component class instance.\n */\nconst createDelegateController = ref => {\n  let inline = false;\n  let workingDelegate;\n  const coreDelegate = CoreDelegate();\n  /**\n   * Determines whether or not an overlay is being used\n   * inline or via a controller/JS and returns the correct delegate.\n   * By default, subsequent calls to getDelegate will use\n   * a cached version of the delegate.\n   * This is useful for calling dismiss after present,\n   * so that the correct delegate is given.\n   * @param force `true` to force the non-cached version of the delegate.\n   * @returns The delegate to use and whether or not the overlay is inline.\n   */\n  const getDelegate = (force = false) => {\n    if (workingDelegate && !force) {\n      return {\n        delegate: workingDelegate,\n        inline\n      };\n    }\n    const {\n      el,\n      hasController,\n      delegate\n    } = ref;\n    /**\n     * If using overlay inline\n     * we potentially need to use the coreDelegate\n     * so that this works in vanilla JS apps.\n     * If a developer has presented this component\n     * via a controller, then we can assume\n     * the component is already in the\n     * correct place.\n     */\n    const parentEl = el.parentNode;\n    inline = parentEl !== null && !hasController;\n    workingDelegate = inline ? delegate || coreDelegate : delegate;\n    return {\n      inline,\n      delegate: workingDelegate\n    };\n  };\n  /**\n   * Attaches a component in the DOM. Teleports the component\n   * to the root of the app.\n   * @param component The component to optionally construct and append to the element.\n   */\n  const attachViewToDom = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator(function* (component) {\n      const {\n        delegate\n      } = getDelegate(true);\n      if (delegate) {\n        return yield delegate.attachViewToDom(ref.el, component);\n      }\n      const {\n        hasController\n      } = ref;\n      if (hasController && component !== undefined) {\n        throw new Error('framework delegate is missing');\n      }\n      return null;\n    });\n    return function attachViewToDom(_x18) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Moves a component back to its original location in the DOM.\n   */\n  const removeViewFromDom = () => {\n    const {\n      delegate\n    } = getDelegate();\n    if (delegate && ref.el !== undefined) {\n      delegate.removeViewFromDom(ref.el.parentElement, ref.el);\n    }\n  };\n  return {\n    attachViewToDom,\n    removeViewFromDom\n  };\n};\n/**\n * Constructs a trigger interaction for an overlay.\n * Presents an overlay when the trigger is clicked.\n *\n * Usage:\n * ```ts\n * triggerController = createTriggerController();\n * triggerController.addClickListener(el, trigger);\n * ```\n */\nconst createTriggerController = () => {\n  let destroyTriggerInteraction;\n  /**\n   * Removes the click listener from the trigger element.\n   */\n  const removeClickListener = () => {\n    if (destroyTriggerInteraction) {\n      destroyTriggerInteraction();\n      destroyTriggerInteraction = undefined;\n    }\n  };\n  /**\n   * Adds a click listener to the trigger element.\n   * Presents the overlay when the trigger is clicked.\n   * @param el The overlay element.\n   * @param trigger The ID of the element to add a click listener to.\n   */\n  const addClickListener = (el, trigger) => {\n    removeClickListener();\n    const triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;\n    if (!triggerEl) {\n      printIonWarning(`A trigger element with the ID \"${trigger}\" was not found in the DOM. The trigger element must be in the DOM when the \"trigger\" property is set on an overlay component.`, el);\n      return;\n    }\n    const configureTriggerInteraction = (targetEl, overlayEl) => {\n      const openOverlay = () => {\n        overlayEl.present();\n      };\n      targetEl.addEventListener('click', openOverlay);\n      return () => {\n        targetEl.removeEventListener('click', openOverlay);\n      };\n    };\n    destroyTriggerInteraction = configureTriggerInteraction(triggerEl, el);\n  };\n  return {\n    addClickListener,\n    removeClickListener\n  };\n};\nexport { BACKDROP as B, GESTURE as G, alertController as a, actionSheetController as b, popoverController as c, createDelegateController as d, createTriggerController as e, present as f, dismiss as g, eventMethod as h, isCancel as i, prepareOverlay as j, activeAnimations as k, loadingController as l, modalController as m, focusFirstDescendant as n, getOverlay as o, pickerController as p, safeCall as s, toastController as t };","map":{"version":3,"names":["b","getIonMode","c","config","C","CoreDelegate","OVERLAY_BACK_BUTTON_PRIORITY","componentOnReady","f","focusElement","a","addEventListener","removeEventListener","g","getElementRoot","p","printIonWarning","lastId","activeAnimations","WeakMap","createController","tagName","create","options","createOverlay","dismiss","data","role","id","dismissOverlay","document","getTop","_asyncToGenerator","getOverlay","alertController","actionSheetController","loadingController","modalController","pickerController","popoverController","toastController","prepareOverlay","el","connectListeners","overlayIndex","hasAttribute","opts","window","customElements","whenDefined","then","element","createElement","classList","add","Object","assign","hasController","getAppRoot","appendChild","Promise","resolve","focusableQueryString","focusFirstDescendant","ref","overlay","firstInput","querySelector","shadowRoot","focus","isOverlayHidden","contains","focusLastDescendant","inputs","Array","from","querySelectorAll","lastInput","length","trapKeyboardFocus","ev","doc","lastOverlay","target","trapScopedFocus","lastFocus","undefined","overlayRoot","overlayWrapper","activeElement","trapShadowFocus","backdropDismiss","detail","register","BACKDROP","key","overlayTag","reject","getOverlays","selector","filter","overlays","o","find","setRootAriaHidden","hidden","root","viewContainer","setAttribute","removeAttribute","present","_ref","name","iosEnterAnimation","mdEnterAnimation","_a","_b","presented","willPresent","emit","willPresentShorthand","mode","animationBuilder","enterAnimation","get","completed","overlayAnimation","didPresent","didPresentShorthand","focusPreviousElementOnDismiss","keyboardClose","_x","_x2","_x3","_x4","_x5","apply","arguments","_ref2","overlayEl","previousElement","onDidDismiss","_x6","_ref3","iosLeaveAnimation","mdLeaveAnimation","style","setProperty","willDismiss","willDismissShorthand","leaveAnimation","GESTURE","didDismiss","didDismissShorthand","delete","removeProperty","err","console","error","remove","_x7","_x8","_x9","_x10","_x11","_x12","_x13","body","_ref4","baseEl","aniRoot","animation","animated","getBoolean","duration","beforeAddWrite","ownerDocument","matches","blur","activeAni","set","play","_x14","_x15","_x16","_x17","eventMethod","eventName","promise","r","onceEvent","event","callback","handler","isCancel","defaultGate","h","safeCall","arg","jmp","e","createDelegateController","inline","workingDelegate","coreDelegate","getDelegate","force","delegate","parentEl","parentNode","attachViewToDom","_ref5","component","Error","_x18","removeViewFromDom","parentElement","createTriggerController","destroyTriggerInteraction","removeClickListener","addClickListener","trigger","triggerEl","getElementById","configureTriggerInteraction","targetEl","openOverlay","B","G","d","i","j","k","l","m","n","s","t"],"sources":["/home/yimnai_dev/PROJECTS/fet/Internet_Mobile_Programming/digitekisi-mobile/node_modules/.pnpm/@ionic+core@7.0.0/node_modules/@ionic/core/dist/esm/overlays-166b34ae.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { b as getIonMode, c as config } from './ionic-global-3b28a225.js';\nimport { C as CoreDelegate } from './framework-delegate-28f7ea29.js';\nimport { OVERLAY_BACK_BUTTON_PRIORITY } from './hardware-back-button-490df115.js';\nimport { c as componentOnReady, f as focusElement, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-5eb6364d.js';\nimport { p as printIonWarning } from './index-e86f0117.js';\n\nlet lastId = 0;\nconst activeAnimations = new WeakMap();\nconst createController = (tagName) => {\n  return {\n    create(options) {\n      return createOverlay(tagName, options);\n    },\n    dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, tagName, id);\n    },\n    async getTop() {\n      return getOverlay(document, tagName);\n    },\n  };\n};\nconst alertController = /*@__PURE__*/ createController('ion-alert');\nconst actionSheetController = /*@__PURE__*/ createController('ion-action-sheet');\nconst loadingController = /*@__PURE__*/ createController('ion-loading');\nconst modalController = /*@__PURE__*/ createController('ion-modal');\nconst pickerController = /*@__PURE__*/ createController('ion-picker');\nconst popoverController = /*@__PURE__*/ createController('ion-popover');\nconst toastController = /*@__PURE__*/ createController('ion-toast');\nconst prepareOverlay = (el) => {\n  if (typeof document !== 'undefined') {\n    connectListeners(document);\n  }\n  const overlayIndex = lastId++;\n  el.overlayIndex = overlayIndex;\n  if (!el.hasAttribute('id')) {\n    el.id = `ion-overlay-${overlayIndex}`;\n  }\n};\nconst createOverlay = (tagName, opts) => {\n  if (typeof window !== 'undefined' && typeof window.customElements !== 'undefined') {\n    return window.customElements.whenDefined(tagName).then(() => {\n      const element = document.createElement(tagName);\n      element.classList.add('overlay-hidden');\n      /**\n       * Convert the passed in overlay options into props\n       * that get passed down into the new overlay.\n       */\n      Object.assign(element, Object.assign(Object.assign({}, opts), { hasController: true }));\n      // append the overlay element to the document body\n      getAppRoot(document).appendChild(element);\n      return new Promise((resolve) => componentOnReady(element, resolve));\n    });\n  }\n  return Promise.resolve();\n};\n/**\n * This query string selects elements that\n * are eligible to receive focus. We select\n * interactive elements that meet the following\n * criteria:\n * 1. Element does not have a negative tabindex\n * 2. Element does not have `hidden`\n * 3. Element does not have `disabled` for non-Ionic components.\n * 4. Element does not have `disabled` or `disabled=\"true\"` for Ionic components.\n * Note: We need this distinction because `disabled=\"false\"` is\n * valid usage for the disabled property on ion-button.\n */\nconst focusableQueryString = '[tabindex]:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), input:not([type=hidden]):not([tabindex^=\"-\"]):not([hidden]):not([disabled]), textarea:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), button:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), select:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), .ion-focusable:not([tabindex^=\"-\"]):not([hidden]):not([disabled]), .ion-focusable[disabled=\"false\"]:not([tabindex^=\"-\"]):not([hidden])';\nconst focusFirstDescendant = (ref, overlay) => {\n  let firstInput = ref.querySelector(focusableQueryString);\n  const shadowRoot = firstInput === null || firstInput === void 0 ? void 0 : firstInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    firstInput = shadowRoot.querySelector(focusableQueryString) || firstInput;\n  }\n  if (firstInput) {\n    focusElement(firstInput);\n  }\n  else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\nconst isOverlayHidden = (overlay) => overlay.classList.contains('overlay-hidden');\nconst focusLastDescendant = (ref, overlay) => {\n  const inputs = Array.from(ref.querySelectorAll(focusableQueryString));\n  let lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;\n  const shadowRoot = lastInput === null || lastInput === void 0 ? void 0 : lastInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    lastInput = shadowRoot.querySelector(focusableQueryString) || lastInput;\n  }\n  if (lastInput) {\n    lastInput.focus();\n  }\n  else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\n/**\n * Traps keyboard focus inside of overlay components.\n * Based on https://w3c.github.io/aria-practices/examples/dialog-modal/alertdialog.html\n * This includes the following components: Action Sheet, Alert, Loading, Modal,\n * Picker, and Popover.\n * Should NOT include: Toast\n */\nconst trapKeyboardFocus = (ev, doc) => {\n  const lastOverlay = getOverlay(doc, 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover');\n  const target = ev.target;\n  /**\n   * If no active overlay, ignore this event.\n   *\n   * If this component uses the shadow dom,\n   * this global listener is pointless\n   * since it will not catch the focus\n   * traps as they are inside the shadow root.\n   * We need to add a listener to the shadow root\n   * itself to ensure the focus trap works.\n   */\n  if (!lastOverlay || !target) {\n    return;\n  }\n  /**\n   * If the ion-disable-focus-trap class\n   * is present on an overlay, then this component\n   * instance has opted out of focus trapping.\n   * An example of this is when the sheet modal\n   * has a backdrop that is disabled. The content\n   * behind the sheet should be focusable until\n   * the backdrop is enabled.\n   */\n  if (lastOverlay.classList.contains('ion-disable-focus-trap')) {\n    return;\n  }\n  const trapScopedFocus = () => {\n    /**\n     * If we are focusing the overlay, clear\n     * the last focused element so that hitting\n     * tab activates the first focusable element\n     * in the overlay wrapper.\n     */\n    if (lastOverlay === target) {\n      lastOverlay.lastFocus = undefined;\n      /**\n       * Otherwise, we must be focusing an element\n       * inside of the overlay. The two possible options\n       * here are an input/button/etc or the ion-focus-trap\n       * element. The focus trap element is used to prevent\n       * the keyboard focus from leaving the overlay when\n       * using Tab or screen assistants.\n       */\n    }\n    else {\n      /**\n       * We do not want to focus the traps, so get the overlay\n       * wrapper element as the traps live outside of the wrapper.\n       */\n      const overlayRoot = getElementRoot(lastOverlay);\n      if (!overlayRoot.contains(target)) {\n        return;\n      }\n      const overlayWrapper = overlayRoot.querySelector('.ion-overlay-wrapper');\n      if (!overlayWrapper) {\n        return;\n      }\n      /**\n       * If the target is inside the wrapper, let the browser\n       * focus as normal and keep a log of the last focused element.\n       */\n      if (overlayWrapper.contains(target)) {\n        lastOverlay.lastFocus = target;\n      }\n      else {\n        /**\n         * Otherwise, we must have focused one of the focus traps.\n         * We need to wrap the focus to either the first element\n         * or the last element.\n         */\n        /**\n         * Once we call `focusFirstDescendant` and focus the first\n         * descendant, another focus event will fire which will\n         * cause `lastOverlay.lastFocus` to be updated before\n         * we can run the code after that. We will cache the value\n         * here to avoid that.\n         */\n        const lastFocus = lastOverlay.lastFocus;\n        // Focus the first element in the overlay wrapper\n        focusFirstDescendant(overlayWrapper, lastOverlay);\n        /**\n         * If the cached last focused element is the\n         * same as the active element, then we need\n         * to wrap focus to the last descendant. This happens\n         * when the first descendant is focused, and the user\n         * presses Shift + Tab. The previous line will focus\n         * the same descendant again (the first one), causing\n         * last focus to equal the active element.\n         */\n        if (lastFocus === doc.activeElement) {\n          focusLastDescendant(overlayWrapper, lastOverlay);\n        }\n        lastOverlay.lastFocus = doc.activeElement;\n      }\n    }\n  };\n  const trapShadowFocus = () => {\n    /**\n     * If the target is inside the wrapper, let the browser\n     * focus as normal and keep a log of the last focused element.\n     */\n    if (lastOverlay.contains(target)) {\n      lastOverlay.lastFocus = target;\n    }\n    else {\n      /**\n       * Otherwise, we are about to have focus\n       * go out of the overlay. We need to wrap\n       * the focus to either the first element\n       * or the last element.\n       */\n      /**\n       * Once we call `focusFirstDescendant` and focus the first\n       * descendant, another focus event will fire which will\n       * cause `lastOverlay.lastFocus` to be updated before\n       * we can run the code after that. We will cache the value\n       * here to avoid that.\n       */\n      const lastFocus = lastOverlay.lastFocus;\n      // Focus the first element in the overlay wrapper\n      focusFirstDescendant(lastOverlay, lastOverlay);\n      /**\n       * If the cached last focused element is the\n       * same as the active element, then we need\n       * to wrap focus to the last descendant. This happens\n       * when the first descendant is focused, and the user\n       * presses Shift + Tab. The previous line will focus\n       * the same descendant again (the first one), causing\n       * last focus to equal the active element.\n       */\n      if (lastFocus === doc.activeElement) {\n        focusLastDescendant(lastOverlay, lastOverlay);\n      }\n      lastOverlay.lastFocus = doc.activeElement;\n    }\n  };\n  if (lastOverlay.shadowRoot) {\n    trapShadowFocus();\n  }\n  else {\n    trapScopedFocus();\n  }\n};\nconst connectListeners = (doc) => {\n  if (lastId === 0) {\n    lastId = 1;\n    doc.addEventListener('focus', (ev) => {\n      trapKeyboardFocus(ev, doc);\n    }, true);\n    // handle back-button click\n    doc.addEventListener('ionBackButton', (ev) => {\n      const lastOverlay = getOverlay(doc);\n      if (lastOverlay === null || lastOverlay === void 0 ? void 0 : lastOverlay.backdropDismiss) {\n        ev.detail.register(OVERLAY_BACK_BUTTON_PRIORITY, () => {\n          return lastOverlay.dismiss(undefined, BACKDROP);\n        });\n      }\n    });\n    // handle ESC to close overlay\n    doc.addEventListener('keydown', (ev) => {\n      if (ev.key === 'Escape') {\n        const lastOverlay = getOverlay(doc);\n        if (lastOverlay === null || lastOverlay === void 0 ? void 0 : lastOverlay.backdropDismiss) {\n          lastOverlay.dismiss(undefined, BACKDROP);\n        }\n      }\n    });\n  }\n};\nconst dismissOverlay = (doc, data, role, overlayTag, id) => {\n  const overlay = getOverlay(doc, overlayTag, id);\n  if (!overlay) {\n    return Promise.reject('overlay does not exist');\n  }\n  return overlay.dismiss(data, role);\n};\nconst getOverlays = (doc, selector) => {\n  if (selector === undefined) {\n    selector = 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast';\n  }\n  return Array.from(doc.querySelectorAll(selector)).filter((c) => c.overlayIndex > 0);\n};\n/**\n * Returns an overlay element\n * @param doc The document to find the element within.\n * @param overlayTag The selector for the overlay, defaults to Ionic overlay components.\n * @param id The unique identifier for the overlay instance.\n * @returns The overlay element or `undefined` if no overlay element is found.\n */\nconst getOverlay = (doc, overlayTag, id) => {\n  const overlays = getOverlays(doc, overlayTag).filter((o) => !isOverlayHidden(o));\n  return id === undefined ? overlays[overlays.length - 1] : overlays.find((o) => o.id === id);\n};\n/**\n * When an overlay is presented, the main\n * focus is the overlay not the page content.\n * We need to remove the page content from the\n * accessibility tree otherwise when\n * users use \"read screen from top\" gestures with\n * TalkBack and VoiceOver, the screen reader will begin\n * to read the content underneath the overlay.\n *\n * We need a container where all page components\n * exist that is separate from where the overlays\n * are added in the DOM. For most apps, this element\n * is the top most ion-router-outlet. In the event\n * that devs are not using a router,\n * they will need to add the \"ion-view-container-root\"\n * id to the element that contains all of their views.\n *\n * TODO: If Framework supports having multiple top\n * level router outlets we would need to update this.\n * Example: One outlet for side menu and one outlet\n * for main content.\n */\nconst setRootAriaHidden = (hidden = false) => {\n  const root = getAppRoot(document);\n  const viewContainer = root.querySelector('ion-router-outlet, ion-nav, #ion-view-container-root');\n  if (!viewContainer) {\n    return;\n  }\n  if (hidden) {\n    viewContainer.setAttribute('aria-hidden', 'true');\n  }\n  else {\n    viewContainer.removeAttribute('aria-hidden');\n  }\n};\nconst present = async (overlay, name, iosEnterAnimation, mdEnterAnimation, opts) => {\n  var _a, _b;\n  if (overlay.presented) {\n    return;\n  }\n  setRootAriaHidden(true);\n  overlay.presented = true;\n  overlay.willPresent.emit();\n  (_a = overlay.willPresentShorthand) === null || _a === void 0 ? void 0 : _a.emit();\n  const mode = getIonMode(overlay);\n  // get the user's animation fn if one was provided\n  const animationBuilder = overlay.enterAnimation\n    ? overlay.enterAnimation\n    : config.get(name, mode === 'ios' ? iosEnterAnimation : mdEnterAnimation);\n  const completed = await overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n  if (completed) {\n    overlay.didPresent.emit();\n    (_b = overlay.didPresentShorthand) === null || _b === void 0 ? void 0 : _b.emit();\n  }\n  /**\n   * When an overlay that steals focus\n   * is dismissed, focus should be returned\n   * to the element that was focused\n   * prior to the overlay opening. Toast\n   * does not steal focus and is excluded\n   * from returning focus as a result.\n   */\n  if (overlay.el.tagName !== 'ION-TOAST') {\n    focusPreviousElementOnDismiss(overlay.el);\n  }\n  /**\n   * If the focused element is already\n   * inside the overlay component then\n   * focus should not be moved from that\n   * to the overlay container.\n   */\n  if (overlay.keyboardClose && (document.activeElement === null || !overlay.el.contains(document.activeElement))) {\n    overlay.el.focus();\n  }\n};\n/**\n * When an overlay component is dismissed,\n * focus should be returned to the element\n * that presented the overlay. Otherwise\n * focus will be set on the body which\n * means that people using screen readers\n * or tabbing will need to re-navigate\n * to where they were before they\n * opened the overlay.\n */\nconst focusPreviousElementOnDismiss = async (overlayEl) => {\n  let previousElement = document.activeElement;\n  if (!previousElement) {\n    return;\n  }\n  const shadowRoot = previousElement === null || previousElement === void 0 ? void 0 : previousElement.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    previousElement = shadowRoot.querySelector(focusableQueryString) || previousElement;\n  }\n  await overlayEl.onDidDismiss();\n  previousElement.focus();\n};\nconst dismiss = async (overlay, data, role, name, iosLeaveAnimation, mdLeaveAnimation, opts) => {\n  var _a, _b;\n  if (!overlay.presented) {\n    return false;\n  }\n  setRootAriaHidden(false);\n  overlay.presented = false;\n  try {\n    // Overlay contents should not be clickable during dismiss\n    overlay.el.style.setProperty('pointer-events', 'none');\n    overlay.willDismiss.emit({ data, role });\n    (_a = overlay.willDismissShorthand) === null || _a === void 0 ? void 0 : _a.emit({ data, role });\n    const mode = getIonMode(overlay);\n    const animationBuilder = overlay.leaveAnimation\n      ? overlay.leaveAnimation\n      : config.get(name, mode === 'ios' ? iosLeaveAnimation : mdLeaveAnimation);\n    // If dismissed via gesture, no need to play leaving animation again\n    if (role !== GESTURE) {\n      await overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n    }\n    overlay.didDismiss.emit({ data, role });\n    (_b = overlay.didDismissShorthand) === null || _b === void 0 ? void 0 : _b.emit({ data, role });\n    activeAnimations.delete(overlay);\n    /**\n     * Make overlay hidden again in case it is being reused.\n     * We can safely remove pointer-events: none as\n     * overlay-hidden will set display: none.\n     */\n    overlay.el.classList.add('overlay-hidden');\n    overlay.el.style.removeProperty('pointer-events');\n    /**\n     * Clear any focus trapping references\n     * when the overlay is dismissed.\n     */\n    if (overlay.el.lastFocus !== undefined) {\n      overlay.el.lastFocus = undefined;\n    }\n  }\n  catch (err) {\n    console.error(err);\n  }\n  overlay.el.remove();\n  return true;\n};\nconst getAppRoot = (doc) => {\n  return doc.querySelector('ion-app') || doc.body;\n};\nconst overlayAnimation = async (overlay, animationBuilder, baseEl, opts) => {\n  // Make overlay visible in case it's hidden\n  baseEl.classList.remove('overlay-hidden');\n  const aniRoot = overlay.el;\n  const animation = animationBuilder(aniRoot, opts);\n  if (!overlay.animated || !config.getBoolean('animated', true)) {\n    animation.duration(0);\n  }\n  if (overlay.keyboardClose) {\n    animation.beforeAddWrite(() => {\n      const activeElement = baseEl.ownerDocument.activeElement;\n      if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.matches('input,ion-input, ion-textarea')) {\n        activeElement.blur();\n      }\n    });\n  }\n  const activeAni = activeAnimations.get(overlay) || [];\n  activeAnimations.set(overlay, [...activeAni, animation]);\n  await animation.play();\n  return true;\n};\nconst eventMethod = (element, eventName) => {\n  let resolve;\n  const promise = new Promise((r) => (resolve = r));\n  onceEvent(element, eventName, (event) => {\n    resolve(event.detail);\n  });\n  return promise;\n};\nconst onceEvent = (element, eventName, callback) => {\n  const handler = (ev) => {\n    removeEventListener(element, eventName, handler);\n    callback(ev);\n  };\n  addEventListener(element, eventName, handler);\n};\nconst isCancel = (role) => {\n  return role === 'cancel' || role === BACKDROP;\n};\nconst defaultGate = (h) => h();\n/**\n * Calls a developer provided method while avoiding\n * Angular Zones. Since the handler is provided by\n * the developer, we should throw any errors\n * received so that developer-provided bug\n * tracking software can log it.\n */\nconst safeCall = (handler, arg) => {\n  if (typeof handler === 'function') {\n    const jmp = config.get('_zoneGate', defaultGate);\n    return jmp(() => {\n      try {\n        return handler(arg);\n      }\n      catch (e) {\n        throw e;\n      }\n    });\n  }\n  return undefined;\n};\nconst BACKDROP = 'backdrop';\nconst GESTURE = 'gesture';\n/**\n * Creates a delegate controller.\n *\n * Requires that the component has the following properties:\n * - `el: HTMLElement`\n * - `hasController: boolean`\n * - `delegate?: FrameworkDelegate`\n *\n * @param ref The component class instance.\n */\nconst createDelegateController = (ref) => {\n  let inline = false;\n  let workingDelegate;\n  const coreDelegate = CoreDelegate();\n  /**\n   * Determines whether or not an overlay is being used\n   * inline or via a controller/JS and returns the correct delegate.\n   * By default, subsequent calls to getDelegate will use\n   * a cached version of the delegate.\n   * This is useful for calling dismiss after present,\n   * so that the correct delegate is given.\n   * @param force `true` to force the non-cached version of the delegate.\n   * @returns The delegate to use and whether or not the overlay is inline.\n   */\n  const getDelegate = (force = false) => {\n    if (workingDelegate && !force) {\n      return {\n        delegate: workingDelegate,\n        inline,\n      };\n    }\n    const { el, hasController, delegate } = ref;\n    /**\n     * If using overlay inline\n     * we potentially need to use the coreDelegate\n     * so that this works in vanilla JS apps.\n     * If a developer has presented this component\n     * via a controller, then we can assume\n     * the component is already in the\n     * correct place.\n     */\n    const parentEl = el.parentNode;\n    inline = parentEl !== null && !hasController;\n    workingDelegate = inline ? delegate || coreDelegate : delegate;\n    return { inline, delegate: workingDelegate };\n  };\n  /**\n   * Attaches a component in the DOM. Teleports the component\n   * to the root of the app.\n   * @param component The component to optionally construct and append to the element.\n   */\n  const attachViewToDom = async (component) => {\n    const { delegate } = getDelegate(true);\n    if (delegate) {\n      return await delegate.attachViewToDom(ref.el, component);\n    }\n    const { hasController } = ref;\n    if (hasController && component !== undefined) {\n      throw new Error('framework delegate is missing');\n    }\n    return null;\n  };\n  /**\n   * Moves a component back to its original location in the DOM.\n   */\n  const removeViewFromDom = () => {\n    const { delegate } = getDelegate();\n    if (delegate && ref.el !== undefined) {\n      delegate.removeViewFromDom(ref.el.parentElement, ref.el);\n    }\n  };\n  return {\n    attachViewToDom,\n    removeViewFromDom,\n  };\n};\n/**\n * Constructs a trigger interaction for an overlay.\n * Presents an overlay when the trigger is clicked.\n *\n * Usage:\n * ```ts\n * triggerController = createTriggerController();\n * triggerController.addClickListener(el, trigger);\n * ```\n */\nconst createTriggerController = () => {\n  let destroyTriggerInteraction;\n  /**\n   * Removes the click listener from the trigger element.\n   */\n  const removeClickListener = () => {\n    if (destroyTriggerInteraction) {\n      destroyTriggerInteraction();\n      destroyTriggerInteraction = undefined;\n    }\n  };\n  /**\n   * Adds a click listener to the trigger element.\n   * Presents the overlay when the trigger is clicked.\n   * @param el The overlay element.\n   * @param trigger The ID of the element to add a click listener to.\n   */\n  const addClickListener = (el, trigger) => {\n    removeClickListener();\n    const triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;\n    if (!triggerEl) {\n      printIonWarning(`A trigger element with the ID \"${trigger}\" was not found in the DOM. The trigger element must be in the DOM when the \"trigger\" property is set on an overlay component.`, el);\n      return;\n    }\n    const configureTriggerInteraction = (targetEl, overlayEl) => {\n      const openOverlay = () => {\n        overlayEl.present();\n      };\n      targetEl.addEventListener('click', openOverlay);\n      return () => {\n        targetEl.removeEventListener('click', openOverlay);\n      };\n    };\n    destroyTriggerInteraction = configureTriggerInteraction(triggerEl, el);\n  };\n  return {\n    addClickListener,\n    removeClickListener,\n  };\n};\n\nexport { BACKDROP as B, GESTURE as G, alertController as a, actionSheetController as b, popoverController as c, createDelegateController as d, createTriggerController as e, present as f, dismiss as g, eventMethod as h, isCancel as i, prepareOverlay as j, activeAnimations as k, loadingController as l, modalController as m, focusFirstDescendant as n, getOverlay as o, pickerController as p, safeCall as s, toastController as t };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}